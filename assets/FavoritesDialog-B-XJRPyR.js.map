{"version":3,"file":"FavoritesDialog-B-XJRPyR.js","sources":["../../node_modules/date-fns/differenceInCalendarMonths.js","../../node_modules/date-fns/differenceInMilliseconds.js","../../node_modules/date-fns/endOfDay.js","../../node_modules/date-fns/endOfMonth.js","../../node_modules/date-fns/isLastDayOfMonth.js","../../node_modules/date-fns/differenceInMonths.js","../../node_modules/date-fns/differenceInSeconds.js","../../node_modules/date-fns/formatDistance.js","../../node_modules/date-fns/formatDistanceToNow.js","../../src/FavoritesDialog.tsx"],"sourcesContent":["import { normalizeDates } from \"./_lib/normalizeDates.js\";\n\n/**\n * The {@link differenceInCalendarMonths} function options.\n */\n\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of calendar months\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\nexport function differenceInCalendarMonths(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    earlierDate,\n  );\n\n  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();\n  const monthsDiff = laterDate_.getMonth() - earlierDate_.getMonth();\n\n  return yearsDiff * 12 + monthsDiff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarMonths;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n *\n * @returns The number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport function differenceInMilliseconds(laterDate, earlierDate) {\n  return +toDate(laterDate) - +toDate(earlierDate);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMilliseconds;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfDay} function options.\n */\n\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a day\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\nexport function endOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfDay;\n","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfMonth} function options.\n */\n\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a month\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport function endOfMonth(date, options) {\n  const _date = toDate(date, options?.in);\n  const month = _date.getMonth();\n  _date.setFullYear(_date.getFullYear(), month + 1, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfMonth;\n","import { endOfDay } from \"./endOfDay.js\";\nimport { endOfMonth } from \"./endOfMonth.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @param date - The date to check\n * @param options - An object with options\n *\n * @returns The date is the last day of a month\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\nexport function isLastDayOfMonth(date, options) {\n  const _date = toDate(date, options?.in);\n  return +endOfDay(_date, options) === +endOfMonth(_date, options);\n}\n\n// Fallback for modularized imports:\nexport default isLastDayOfMonth;\n","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.js\";\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.js\";\n\n/**\n * The {@link differenceInMonths} function options.\n */\n\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\nexport function differenceInMonths(laterDate, earlierDate, options) {\n  const [laterDate_, workingLaterDate, earlierDate_] = normalizeDates(\n    options?.in,\n    laterDate,\n    laterDate,\n    earlierDate,\n  );\n\n  const sign = compareAsc(workingLaterDate, earlierDate_);\n  const difference = Math.abs(\n    differenceInCalendarMonths(workingLaterDate, earlierDate_),\n  );\n\n  if (difference < 1) return 0;\n\n  if (workingLaterDate.getMonth() === 1 && workingLaterDate.getDate() > 27)\n    workingLaterDate.setDate(30);\n\n  workingLaterDate.setMonth(workingLaterDate.getMonth() - sign * difference);\n\n  let isLastMonthNotFull = compareAsc(workingLaterDate, earlierDate_) === -sign;\n\n  if (\n    isLastDayOfMonth(laterDate_) &&\n    difference === 1 &&\n    compareAsc(laterDate_, earlierDate_) === 1\n  ) {\n    isLastMonthNotFull = false;\n  }\n\n  const result = sign * (difference - +isLastMonthNotFull);\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInMonths;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\n\n/**\n * The {@link differenceInSeconds} function options.\n */\n\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of seconds\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport function differenceInSeconds(laterDate, earlierDate, options) {\n  const diff = differenceInMilliseconds(laterDate, earlierDate) / 1000;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInSeconds;\n","import { defaultLocale } from \"./_lib/defaultLocale.js\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.js\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport { minutesInDay, minutesInMonth } from \"./constants.js\";\nimport { differenceInMonths } from \"./differenceInMonths.js\";\nimport { differenceInSeconds } from \"./differenceInSeconds.js\";\n\n/**\n * The {@link formatDistance} function options.\n */\n\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @param laterDate - The date\n * @param earlierDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\nexport function formatDistance(laterDate, earlierDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const minutesInAlmostTwoDays = 2520;\n\n  const comparison = compareAsc(laterDate, earlierDate);\n\n  if (isNaN(comparison)) throw new RangeError(\"Invalid time value\");\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  const [laterDate_, earlierDate_] = normalizeDates(\n    options?.in,\n    ...(comparison > 0 ? [earlierDate, laterDate] : [laterDate, earlierDate]),\n  );\n\n  const seconds = differenceInSeconds(earlierDate_, laterDate_);\n  const offsetInSeconds =\n    (getTimezoneOffsetInMilliseconds(earlierDate_) -\n      getTimezoneOffsetInMilliseconds(laterDate_)) /\n    1000;\n  const minutes = Math.round((seconds - offsetInSeconds) / 60);\n  let months;\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options?.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n      }\n    }\n\n    // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n\n    // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\n\n    // 1.5 hrs up to 24 hrs\n  } else if (minutes < minutesInDay) {\n    const hours = Math.round(minutes / 60);\n    return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\n\n    // 1 day up to 1.75 days\n  } else if (minutes < minutesInAlmostTwoDays) {\n    return locale.formatDistance(\"xDays\", 1, localizeOptions);\n\n    // 1.75 days up to 30 days\n  } else if (minutes < minutesInMonth) {\n    const days = Math.round(minutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 month up to 2 months\n  } else if (minutes < minutesInMonth * 2) {\n    months = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n  }\n\n  months = differenceInMonths(earlierDate_, laterDate_);\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    const nearestMonth = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const monthsSinceStartOfYear = months % 12;\n    const years = Math.trunc(months / 12);\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\n\n      // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance(\"overXYears\", years, localizeOptions);\n\n      // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n    }\n  }\n}\n\n// Fallback for modularized imports:\nexport default formatDistance;\n","import { constructNow } from \"./constructNow.js\";\n\nimport { formatDistance } from \"./formatDistance.js\";\n\n/**\n * The {@link formatDistanceToNow} function options.\n */\n\n/**\n * @name formatDistanceToNow\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given date and now in words.\n *\n * | Distance to now                                                   | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance to now     | Result               |\n * |---------------------|----------------------|\n * | 0 secs ... 5 secs   | less than 5 seconds  |\n * | 5 secs ... 10 secs  | less than 10 seconds |\n * | 10 secs ... 20 secs | less than 20 seconds |\n * | 20 secs ... 40 secs | half a minute        |\n * | 40 secs ... 60 secs | less than a minute   |\n * | 60 secs ... 90 secs | 1 minute             |\n *\n * @param date - The given date\n * @param options - The object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * const result = formatDistanceToNow(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * const result = formatDistanceToNow(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   {includeSeconds: true}\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * const result = formatDistanceToNow(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in about 1 year'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 August 2016 in Esperanto?\n * const eoLocale = require('date-fns/locale/eo')\n * const result = formatDistanceToNow(\n *   new Date(2016, 7, 1),\n *   {locale: eoLocale}\n * )\n * //=> 'pli ol 1 jaro'\n */\nexport function formatDistanceToNow(date, options) {\n  return formatDistance(date, constructNow(date), options);\n}\n\n// Fallback for modularized imports:\nexport default formatDistanceToNow;\n","import { useState } from 'react'\n\nimport { formatDistanceToNow } from 'date-fns'\nimport { FaChevronDown, FaChevronUp } from 'react-icons/fa6'\nimport { IoMdHome } from 'react-icons/io'\nimport { MdDelete } from 'react-icons/md'\n\nimport BaseDialog from './BaseDialog'\nimport Button from './Button'\nimport { useAppStore } from './store'\nimport { normalizeForDisplay } from './util'\n\nimport type { Favorite } from './util'\nimport { Link } from 'react-router-dom'\n\nexport default function Favorites({\n  open,\n  onClose,\n  favorites,\n  title,\n}: {\n  open: boolean\n  title: string\n  onClose: () => void\n  favorites: Favorite[]\n}) {\n  const store = useAppStore()\n  const { recentlyVisited } = store\n  const [sortVisits, setSortVisits] = useState(-1)\n  const [sortDateAdded, setSortDateAdded] = useState(0)\n  const ret = Object.fromEntries(recentlyVisited.map(r => [r.name, r]))\n  const favs = favorites\n    .map(f => ({\n      ...f,\n      dateAdded: new Date(ret[f.name]?.dateAdded ?? new Date()),\n    }))\n    .sort(\n      (a, b) =>\n        ((ret[a.name]?.visitedCount ?? 0) - (ret[b.name]?.visitedCount ?? 0)) *\n        sortVisits,\n    )\n    .sort((a, b) => (+a.dateAdded - +b.dateAdded) * sortDateAdded)\n  return (\n    <BaseDialog open={open} onClose={onClose}>\n      <h4 className=\"font-extrabold\">{title}</h4>\n      {favorites.length === 0 ? (\n        <div>No favorites</div>\n      ) : (\n        <div className=\"overflow-auto\">\n          <table>\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th className=\"whitespace-nowrap\">\n                  <Button\n                    onClick={() => {\n                      setSortDateAdded(0)\n                      if (sortVisits === 0) {\n                        setSortVisits(-1)\n                      } else if (sortVisits === -1) {\n                        setSortVisits(1)\n                      } else {\n                        setSortVisits(0)\n                      }\n                    }}\n                  >\n                    # Visits{' '}\n                    {sortVisits === 1 ? (\n                      <FaChevronUp className=\"inline\" />\n                    ) : sortVisits === -1 ? (\n                      <FaChevronDown className=\"inline\" />\n                    ) : null}\n                  </Button>\n                </th>\n                <th className=\"whitespace-nowrap\">\n                  <Button\n                    onClick={() => {\n                      setSortVisits(0)\n                      if (sortDateAdded === 0) {\n                        setSortDateAdded(-1)\n                      } else if (sortDateAdded === -1) {\n                        setSortDateAdded(1)\n                      } else {\n                        setSortDateAdded(0)\n                      }\n                    }}\n                  >\n                    Date added{' '}\n                    {sortDateAdded === 1 ? (\n                      <FaChevronUp className=\"inline\" />\n                    ) : sortDateAdded === -1 ? (\n                      <FaChevronDown className=\"inline\" />\n                    ) : null}\n                  </Button>\n                </th>\n                <th className=\"whitespace-nowrap\">Delete</th>\n                <th className=\"whitespace-nowrap\">Home</th>\n              </tr>\n            </thead>\n            <tbody>\n              {favs.map(f => (\n                <tr key={f.name}>\n                  <td className=\"whitespace-nowrap\">\n                    <Link to={f.name}>\n                      <Button>{normalizeForDisplay(f.name)}</Button>\n                    </Link>\n                  </td>\n                  <td>{ret[f.name]?.visitedCount}</td>\n                  <td>\n                    {formatDistanceToNow(f.dateAdded, { addSuffix: true })}\n                  </td>\n                  <td>\n                    <Button\n                      onClick={() => {\n                        store.removeFavorite(f.name)\n                      }}\n                    >\n                      <MdDelete className=\"inline\" />\n                    </Button>\n                  </td>\n\n                  <td>\n                    <Button\n                      onClick={() => {\n                        store.setDefaultPage(f.name)\n                      }}\n                    >\n                      <IoMdHome className=\"inline\" />\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      )}\n    </BaseDialog>\n  )\n}\n"],"names":["differenceInCalendarMonths","laterDate","earlierDate","options","laterDate_","earlierDate_","normalizeDates","yearsDiff","monthsDiff","differenceInMilliseconds","toDate","endOfDay","date","_date","endOfMonth","month","isLastDayOfMonth","differenceInMonths","workingLaterDate","sign","compareAsc","difference","isLastMonthNotFull","result","differenceInSeconds","diff","getRoundingMethod","formatDistance","defaultOptions","getDefaultOptions","locale","defaultLocale","minutesInAlmostTwoDays","comparison","localizeOptions","seconds","offsetInSeconds","getTimezoneOffsetInMilliseconds","minutes","months","minutesInDay","hours","minutesInMonth","days","nearestMonth","monthsSinceStartOfYear","years","formatDistanceToNow","constructNow","Favorites","open","onClose","favorites","title","store","useAppStore","recentlyVisited","sortVisits","setSortVisits","useState","sortDateAdded","setSortDateAdded","ret","r","favs","f","_a","a","b","_b","jsxs","BaseDialog","jsx","Button","FaChevronUp","FaChevronDown","Link","normalizeForDisplay","MdDelete","IoMdHome"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8]}
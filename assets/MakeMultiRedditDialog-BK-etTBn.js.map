{"version":3,"file":"MakeMultiRedditDialog-BK-etTBn.js","sources":["../../src/MakeMultiRedditDialog.tsx"],"sourcesContent":["import { useState } from 'react'\n\nimport { formatDistanceToNowStrict } from 'date-fns'\nimport { FaChevronDown, FaChevronUp } from 'react-icons/fa6'\n\nimport BaseDialog from './BaseDialog'\nimport Button from './Button'\nimport { useAppStore } from './store'\nimport {\n  isUserSubreddit,\n  normalizeForDisplay,\n  normalizeSubreddit,\n} from './util'\n\nexport default function MakeMultiRedditDialog({\n  open,\n  onClose,\n}: {\n  open: boolean\n  onClose: () => void\n}) {\n  const store = useAppStore()\n  const { recentlyVisited, favorites } = store\n  const [multi, setMulti] = useState<string[]>([])\n  const [sortVisits, setSortVisits] = useState(-1)\n  const [sortDateAdded, setSortDateAdded] = useState(0)\n  const [feedName, setFeedName] = useState('')\n  const [creatingFeed, setCreatingFeed] = useState(true)\n  const ret = Object.fromEntries(recentlyVisited.map(r => [r.name, r]))\n\n  const favs = [\n    ...favorites\n      .filter(f => !isUserSubreddit(f.name))\n      .sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase())),\n    ...favorites\n      .filter(f => isUserSubreddit(f.name))\n      .sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase())),\n  ]\n    .map(f => ({\n      ...f,\n      dateAdded: new Date(ret[f.name]?.dateAdded ?? new Date()),\n    }))\n    .sort(\n      (a, b) =>\n        ((ret[a.name]?.visitedCount ?? 0) - (ret[b.name]?.visitedCount ?? 0)) *\n        sortVisits,\n    )\n    .sort((a, b) => (+a.dateAdded - +b.dateAdded) * sortDateAdded)\n  return (\n    <BaseDialog open={open} onClose={onClose}>\n      {creatingFeed ? (\n        <div>\n          <h4>Make multi-reddit</h4>\n          <div>\n            <div>Current feed: {multi.join(', ')}</div>\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={() => {\n                  setCreatingFeed(false)\n                }}\n              >\n                Create feed\n              </Button>\n              <Button\n                onClick={() => {\n                  setMulti([])\n                }}\n              >\n                Clear\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"max-h-[80vh] overflow-auto\">\n            <table>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th className=\"whitespace-nowrap\">\n                    <Button\n                      onClick={() => {\n                        setSortDateAdded(0)\n                        if (sortVisits === 0) {\n                          setSortVisits(-1)\n                        } else if (sortVisits === -1) {\n                          setSortVisits(1)\n                        } else {\n                          setSortVisits(0)\n                        }\n                      }}\n                    >\n                      # Visits{' '}\n                      {sortVisits === 1 ? (\n                        <FaChevronUp className=\"inline\" />\n                      ) : sortVisits === -1 ? (\n                        <FaChevronDown className=\"inline\" />\n                      ) : null}\n                    </Button>\n                  </th>\n                  <th className=\"whitespace-nowrap\">\n                    <Button\n                      onClick={() => {\n                        setSortVisits(0)\n                        if (sortDateAdded === 0) {\n                          setSortDateAdded(-1)\n                        } else if (sortDateAdded === -1) {\n                          setSortDateAdded(1)\n                        } else {\n                          setSortDateAdded(0)\n                        }\n                      }}\n                    >\n                      Date added{' '}\n                      {sortDateAdded === 1 ? (\n                        <FaChevronUp className=\"inline\" />\n                      ) : sortDateAdded === -1 ? (\n                        <FaChevronDown className=\"inline\" />\n                      ) : null}\n                    </Button>\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {favs.map(f => (\n                  <tr key={f.name}>\n                    <td className=\"whitespace-nowrap\">\n                      <Button\n                        onClick={() => {\n                          if (!multi.includes(normalizeSubreddit(f.name))) {\n                            setMulti([...multi, normalizeSubreddit(f.name)])\n                          }\n                        }}\n                      >\n                        {normalizeForDisplay(f.name)}\n                      </Button>\n                    </td>\n                    <td>{ret[f.name]?.visitedCount}</td>\n                    <td>\n                      {formatDistanceToNowStrict(f.dateAdded, {\n                        addSuffix: true,\n                      })}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      ) : (\n        <div className=\"m-8\">\n          <form\n            onSubmit={event => {\n              event.preventDefault()\n              if (feedName) {\n                store.createFeed({ subreddits: multi, feedName })\n                onClose()\n              }\n            }}\n          >\n            <div>\n              <label htmlFor=\"feedname\">Feed name:</label>\n              <input\n                id=\"feedname\"\n                type=\"text\"\n                className=\"input\"\n                value={feedName}\n                onChange={event => {\n                  setFeedName(event.target.value)\n                }}\n              />\n              <Button type=\"submit\">Submit</Button>\n            </div>\n          </form>\n        </div>\n      )}\n    </BaseDialog>\n  )\n}\n"],"names":["MakeMultiRedditDialog","open","onClose","store","useAppStore","recentlyVisited","favorites","multi","setMulti","useState","sortVisits","setSortVisits","sortDateAdded","setSortDateAdded","feedName","setFeedName","creatingFeed","setCreatingFeed","ret","r","favs","f","isUserSubreddit","a","b","_a","_b","BaseDialog","jsx","jsxs","Button","FaChevronUp","FaChevronDown","normalizeSubreddit","normalizeForDisplay","formatDistanceToNowStrict","event"],"mappings":"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"}
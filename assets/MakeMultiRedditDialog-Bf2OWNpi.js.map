{"version":3,"file":"MakeMultiRedditDialog-Bf2OWNpi.js","sources":["../../node_modules/date-fns/formatDistanceStrict.mjs","../../node_modules/date-fns/formatDistanceToNowStrict.mjs","../../src/MakeMultiRedditDialog.tsx"],"sourcesContent":["import { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\nimport { compareAsc } from \"./compareAsc.mjs\";\nimport {\n  millisecondsInMinute,\n  minutesInDay,\n  minutesInMonth,\n  minutesInYear,\n} from \"./constants.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * The {@link formatDistanceStrict} function options.\n */\n\n/**\n * The unit used to format the distance in {@link formatDistanceStrict}.\n */\n\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nexport function formatDistanceStrict(date, baseDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n\n  const comparison = compareAsc(date, baseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  let dateLeft;\n  let dateRight;\n  if (comparison > 0) {\n    dateLeft = toDate(baseDate);\n    dateRight = toDate(date);\n  } else {\n    dateLeft = toDate(date);\n    dateRight = toDate(baseDate);\n  }\n\n  const roundingMethod = getRoundingMethod(options?.roundingMethod ?? \"round\");\n\n  const milliseconds = dateRight.getTime() - dateLeft.getTime();\n  const minutes = milliseconds / millisecondsInMinute;\n\n  const timezoneOffset =\n    getTimezoneOffsetInMilliseconds(dateRight) -\n    getTimezoneOffsetInMilliseconds(dateLeft);\n\n  // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n  const dstNormalizedMinutes =\n    (milliseconds - timezoneOffset) / millisecondsInMinute;\n\n  const defaultUnit = options?.unit;\n  let unit;\n  if (!defaultUnit) {\n    if (minutes < 1) {\n      unit = \"second\";\n    } else if (minutes < 60) {\n      unit = \"minute\";\n    } else if (minutes < minutesInDay) {\n      unit = \"hour\";\n    } else if (dstNormalizedMinutes < minutesInMonth) {\n      unit = \"day\";\n    } else if (dstNormalizedMinutes < minutesInYear) {\n      unit = \"month\";\n    } else {\n      unit = \"year\";\n    }\n  } else {\n    unit = defaultUnit;\n  }\n\n  // 0 up to 60 seconds\n  if (unit === \"second\") {\n    const seconds = roundingMethod(milliseconds / 1000);\n    return locale.formatDistance(\"xSeconds\", seconds, localizeOptions);\n\n    // 1 up to 60 mins\n  } else if (unit === \"minute\") {\n    const roundedMinutes = roundingMethod(minutes);\n    return locale.formatDistance(\"xMinutes\", roundedMinutes, localizeOptions);\n\n    // 1 up to 24 hours\n  } else if (unit === \"hour\") {\n    const hours = roundingMethod(minutes / 60);\n    return locale.formatDistance(\"xHours\", hours, localizeOptions);\n\n    // 1 up to 30 days\n  } else if (unit === \"day\") {\n    const days = roundingMethod(dstNormalizedMinutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 up to 12 months\n  } else if (unit === \"month\") {\n    const months = roundingMethod(dstNormalizedMinutes / minutesInMonth);\n    return months === 12 && defaultUnit !== \"month\"\n      ? locale.formatDistance(\"xYears\", 1, localizeOptions)\n      : locale.formatDistance(\"xMonths\", months, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const years = roundingMethod(dstNormalizedMinutes / minutesInYear);\n    return locale.formatDistance(\"xYears\", years, localizeOptions);\n  }\n}\n\n// Fallback for modularized imports:\nexport default formatDistanceStrict;\n","import { formatDistanceStrict } from \"./formatDistanceStrict.mjs\";\nimport { constructNow } from \"./constructNow.mjs\";\n\n/**\n * The {@link formatDistanceToNowStrict} function options.\n */\n\n/**\n * @name formatDistanceToNowStrict\n * @category Common Helpers\n * @summary Return the distance between the given date and now in words.\n * @pure false\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The given date\n * @param options - An object with options.\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // If today is 1 January 2015, what is the distance to 2 July 2014?\n * const result = formatDistanceToNowStrict(\n *   new Date(2014, 6, 2)\n * )\n * //=> '6 months'\n *\n * @example\n * // If now is 1 January 2015 00:00:00,\n * // what is the distance to 1 January 2015 00:00:15, including seconds?\n * const result = formatDistanceToNowStrict(\n *   new Date(2015, 0, 1, 0, 0, 15)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016, with a suffix?\n * const result = formatDistanceToNowStrict(\n *   new Date(2016, 0, 1),\n *   {addSuffix: true}\n * )\n * //=> 'in 1 year'\n *\n * @example\n * // If today is 28 January 2015,\n * // what is the distance to 1 January 2015, in months, rounded up??\n * const result = formatDistanceToNowStrict(new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // If today is 1 January 2015,\n * // what is the distance to 1 January 2016 in Esperanto?\n * const eoLocale = require('date-fns/locale/eo')\n * const result = formatDistanceToNowStrict(\n *   new Date(2016, 0, 1),\n *   {locale: eoLocale}\n * )\n * //=> '1 jaro'\n */\nexport function formatDistanceToNowStrict(date, options) {\n  return formatDistanceStrict(date, constructNow(date), options);\n}\n\n// Fallback for modularized imports:\nexport default formatDistanceToNowStrict;\n","import { useState } from 'react'\nimport {\n  isUserSubreddit,\n  normalizeForDisplay,\n  normalizeSubreddit,\n  useAppStore,\n} from './store'\n\nimport { formatDistanceToNowStrict } from 'date-fns'\n// icons\nimport { FaChevronDown, FaChevronUp } from 'react-icons/fa6'\n// components\nimport Button from './Button'\nimport BaseDialog from './BaseDialog'\n\nexport default function MakeMultiRedditDialog({\n  open,\n  onClose,\n}: {\n  open: boolean\n  onClose: () => void\n}) {\n  const store = useAppStore()\n  const { favorites } = store\n  const [multi, setMulti] = useState<string[]>([])\n  const [sortVisits, setSortVisits] = useState(-1)\n  const [sortDateAdded, setSortDateAdded] = useState(0)\n  const [listName, setListName] = useState('')\n  const [creatingList, setCreatingList] = useState(true)\n  const multiVal = `/r/${multi.map(s => s.replace('user/', 'u_').replace('r/', '')).join('+')}`\n  const favs = [\n    ...favorites\n      .filter(f => !isUserSubreddit(f.name))\n      .sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase())),\n    ...favorites\n      .filter(f => isUserSubreddit(f.name))\n      .sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase())),\n  ]\n    .map(f => ({ ...f, dateAdded: new Date(f.dateAdded) }))\n    .sort((a, b) => (a.visitedCount - b.visitedCount) * sortVisits)\n    .sort((a, b) => (+a.dateAdded - +b.dateAdded) * sortDateAdded)\n  return (\n    <BaseDialog open={open} onClose={onClose}>\n      {creatingList ? (\n        <div>\n          <h4>\n            Make multi-reddit\n            <div>\n              <div>\n                <input id=\"multireddit\" readOnly type=\"text\" value={multiVal} />\n                <Button\n                  onClick={() => {\n                    setCreatingList(false)\n                  }}\n                >\n                  Create list\n                </Button>\n                <Button\n                  onClick={() => {\n                    setMulti([])\n                  }}\n                >\n                  Clear\n                </Button>\n              </div>\n            </div>\n          </h4>\n\n          <div className=\"max-h-[80vh] overflow-auto\">\n            <table>\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th className=\"whitespace-nowrap\">\n                    <Button\n                      onClick={() => {\n                        setSortDateAdded(0)\n                        if (sortVisits === 0) {\n                          setSortVisits(-1)\n                        } else if (sortVisits === -1) {\n                          setSortVisits(1)\n                        } else {\n                          setSortVisits(0)\n                        }\n                      }}\n                    >\n                      # Visits{' '}\n                      {sortVisits === 1 ? (\n                        <FaChevronUp className=\"inline\" />\n                      ) : sortVisits === -1 ? (\n                        <FaChevronDown className=\"inline\" />\n                      ) : null}\n                    </Button>\n                  </th>\n                  <th className=\"whitespace-nowrap\">\n                    <Button\n                      onClick={() => {\n                        setSortVisits(0)\n                        if (sortDateAdded === 0) {\n                          setSortDateAdded(-1)\n                        } else if (sortDateAdded === -1) {\n                          setSortDateAdded(1)\n                        } else {\n                          setSortDateAdded(0)\n                        }\n                      }}\n                    >\n                      Date added{' '}\n                      {sortDateAdded === 1 ? (\n                        <FaChevronUp className=\"inline\" />\n                      ) : sortDateAdded === -1 ? (\n                        <FaChevronDown className=\"inline\" />\n                      ) : null}\n                    </Button>\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {favs.map(f => (\n                  <tr key={f.name}>\n                    <td className=\"whitespace-nowrap\">\n                      <Button\n                        onClick={() => {\n                          if (!multi.includes(normalizeSubreddit(f.name))) {\n                            setMulti([...multi, normalizeSubreddit(f.name)])\n                          }\n                        }}\n                      >\n                        {normalizeForDisplay(f.name)}\n                      </Button>\n                    </td>\n                    <td>{f.visitedCount}</td>\n                    <td>\n                      {formatDistanceToNowStrict(f.dateAdded, {\n                        addSuffix: true,\n                      })}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      ) : (\n        <div className=\"m-8\">\n          <form\n            onSubmit={event => {\n              event.preventDefault()\n              if (listName) {\n                store.addList(multiVal, listName)\n                onClose()\n              }\n            }}\n          >\n            <div>\n              <label htmlFor=\"listname\">List name:</label>\n              <input\n                autoFocus\n                id=\"listname\"\n                type=\"text\"\n                value={listName}\n                onChange={event => {\n                  setListName(event.target.value)\n                }}\n              />\n              <Button type=\"submit\">Submit</Button>\n            </div>\n          </form>\n        </div>\n      )}\n    </BaseDialog>\n  )\n}\n"],"names":["formatDistanceStrict","date","baseDate","options","defaultOptions","getDefaultOptions","locale","defaultLocale","comparison","compareAsc","localizeOptions","dateLeft","dateRight","toDate","roundingMethod","getRoundingMethod","milliseconds","minutes","millisecondsInMinute","timezoneOffset","getTimezoneOffsetInMilliseconds","dstNormalizedMinutes","defaultUnit","unit","minutesInDay","minutesInMonth","minutesInYear","seconds","roundedMinutes","hours","days","months","years","formatDistanceToNowStrict","constructNow","MakeMultiRedditDialog","open","onClose","store","useAppStore","favorites","multi","setMulti","useState","sortVisits","setSortVisits","sortDateAdded","setSortDateAdded","listName","setListName","creatingList","setCreatingList","multiVal","s","favs","f","isUserSubreddit","a","b","BaseDialog","jsxs","jsx","Button","FaChevronUp","FaChevronDown","normalizeSubreddit","normalizeForDisplay","event"],"mappings":"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","x_google_ignoreList":[0,1]}
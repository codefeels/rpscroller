{"version":3,"file":"util-9s3NlqMM.js","sources":["../../src/util.ts"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\nexport function useDialogShown(open: boolean) {\n  const ref = useRef<HTMLDialogElement>(null)\n  const shown = useRef(false)\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n\n    if (open) {\n      if (!shown.current) {\n        ref.current.showModal()\n      }\n      shown.current = true\n    } else {\n      if (shown.current) {\n        ref.current.close()\n      }\n      shown.current = false\n    }\n  }, [open])\n  return ref\n}\n\nexport function redGifUrlToId(url: string) {\n  // watch to ifr\n  const matches = /redgifs.com\\/watch\\/([\\w-]+)\\/?/i.exec(url)\n  if (matches?.length) {\n    return matches[1]\n  }\n\n  // already iframe\n  const matches2 = /redgifs.com\\/ifr\\/([\\w-]+)\\/?/i.exec(url)\n  if (matches2?.length) {\n    return matches2[1]\n  }\n\n  // image\n  const matches3 = /redgifs.com\\/i\\/([\\w-]+)\\/?/i.exec(url)\n  if (matches3?.length) {\n    return matches3[1]\n  }\n\n  return false\n}\n\nexport function decode(html: string) {\n  const txt = document.createElement('textarea')\n  txt.innerHTML = html\n  return txt.value\n}\n\ntype Hasher<T> = (input: T) => string\n\n// from https://github.com/seriousManual/dedupe/blob/master/LICENSE\nexport function deduplicate<T>(list: T[], hasher: Hasher<T> = JSON.stringify) {\n  const clone: T[] = []\n  const lookup = new Set<string>()\n\n  for (const entry of list) {\n    const hashed = hasher(entry)\n\n    if (!lookup.has(hashed)) {\n      clone.push(entry)\n      lookup.add(hashed)\n    }\n  }\n\n  return clone\n}\n\ninterface GalleryEntry {\n  s: {\n    u?: string\n    gif?: string\n  }\n}\nexport interface Post {\n  score: number\n  created: number\n  id: string\n  subreddit_name_prefixed: string\n  title: string\n  pinned: boolean\n  url: string\n  permalink: string\n  author: string\n  media_metadata?: Record<string, GalleryEntry>\n  gallery_data?: {\n    items?: {\n      media_id: string\n      caption: string\n    }[]\n  }\n  crosspost_parent_list?: Post[]\n}\n\nexport interface RedditResponse {\n  data: Data\n}\n\nexport interface Data {\n  before?: string\n  after?: string\n  children: {\n    data: Post\n  }[]\n}\n"],"names":["useDialogShown","open","ref","useRef","shown","useEffect","redGifUrlToId","url","matches","matches2","matches3","decode","html","txt","deduplicate","list","hasher","clone","lookup","entry","hashed"],"mappings":"wCAEO,SAASA,EAAeC,EAAe,CACtC,MAAAC,EAAMC,SAA0B,IAAI,EACpCC,EAAQD,SAAO,EAAK,EAC1BE,OAAAA,EAAAA,UAAU,IAAM,CACTH,EAAI,UAILD,GACGG,EAAM,SACTF,EAAI,QAAQ,YAEdE,EAAM,QAAU,KAEZA,EAAM,SACRF,EAAI,QAAQ,QAEdE,EAAM,QAAU,IAClB,EACC,CAACH,CAAI,CAAC,EACFC,CACT,CAEO,SAASI,EAAcC,EAAa,CAEnC,MAAAC,EAAU,mCAAmC,KAAKD,CAAG,EAC3D,GAAIC,GAAA,MAAAA,EAAS,OACX,OAAOA,EAAQ,CAAC,EAIZ,MAAAC,EAAW,iCAAiC,KAAKF,CAAG,EAC1D,GAAIE,GAAA,MAAAA,EAAU,OACZ,OAAOA,EAAS,CAAC,EAIb,MAAAC,EAAW,+BAA+B,KAAKH,CAAG,EACxD,OAAIG,GAAA,MAAAA,EAAU,OACLA,EAAS,CAAC,EAGZ,EACT,CAEO,SAASC,EAAOC,EAAc,CAC7B,MAAAC,EAAM,SAAS,cAAc,UAAU,EAC7C,OAAAA,EAAI,UAAYD,EACTC,EAAI,KACb,CAKO,SAASC,EAAeC,EAAWC,EAAoB,KAAK,UAAW,CAC5E,MAAMC,EAAa,CAAA,EACbC,MAAa,IAEnB,UAAWC,KAASJ,EAAM,CAClB,MAAAK,EAASJ,EAAOG,CAAK,EAEtBD,EAAO,IAAIE,CAAM,IACpBH,EAAM,KAAKE,CAAK,EAChBD,EAAO,IAAIE,CAAM,EAErB,CAEO,OAAAH,CACT"}